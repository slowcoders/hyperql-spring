logging:
  level:
    sql: debug
    jdbc: debug
    jdbc.sqlonly: debug
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql: debug
    org:
      springframework:
        web:
          filter:
            CommonsRequestLoggingFilter: debug
        security: DEBUG

  pattern:
    console: "%-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n"
    file: "%-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n"

management.security.enabled: false
security.basic.enabled: false

server:
  url: http://localhost:6090
  port: 6090
  contextPath: "/"
  compression:
    enabled: true # 응답 결과 압축 허용.
    min-response-size: 2048
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,application/javascript


database: postgres-agila

spring:
  sql.init:
      mode: always
      schema-locations: classpath*:db/${database}/schema.sql
      data-locations: classpath*:db/${database}/data.sql
  session:
    store-type: none  # Session 저장 유형 StoreType 참조.
    timeout: 3600     # Session timeout.


  datasource:
    url: ${POSTGRES_URL:jdbc:postgresql://localhost/jql_demo}
    username: ${POSTGRES_USER:jql_demo}
    password: ${POSTGRES_PASS:jql_demo}

  jpa:
#    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
      # open-in-view: true(=default) 인 경우, 모든 Controller API 가 자동적으로 Transaction 을 생성한다.
      #               단, API 실행에 긴 시간이 걸리는 경우, 그 시간만큼 DB Connection 을 유지하는 단점이 있다.
      #               일반적인 상황에서는 true를 사용한다.
      # open-in-view: false 로 변경하면, 명시적인 @Transactional 설정이 필요하다.
    open-in-view: true
    hibernate:
      ddl-auto: update
      temp.use_jdbc_metadata_defaults: false
      jdbc.lab.non_contextual_creation: true

    properties:
      hibernate:
        format_sql: true
        # default_schema: public

        # Hibernate cache 설정.
        cache:
          ## true: 2nd level cache 활성화.
          use_second_level_cache: true
          use_query_cache: true
          region:
            ## jcache 사용시
            # factory_class: jcache
            ## hibernate-ehcache 사용시
            factory_class: org.hibernate.cache.ehcache.EhCacheRegionFactory
      javax:
        persistence:
          sharedCache:
            ## @Cacheable 이 명시된 Entity 만 cache 되도록 설정.
            mode: ENABLE_SELECTIVE

