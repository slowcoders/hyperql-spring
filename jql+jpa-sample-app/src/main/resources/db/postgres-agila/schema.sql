--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;


SET search_path = public, pg_catalog;

--
-- Name: actor_actor_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS actor_actor_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.actor_actor_id_seq OWNER TO jql_demo;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: actor; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS actor (
                       actor_id bigint generated by default as identity
                            constraint actor_pkey
                            primary key,
                       first_name character varying(45) NOT NULL,
                       last_name character varying(45) NOT NULL,
                       last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.actor OWNER TO jql_demo;

--
-- Name: mpaa_rating; Type: TYPE; Schema: public; Owner: jql_demo
--

-- CREATE TYPE mpaa_rating AS ENUM (
--     'G',
--     'PG',
--     'PG-13',
--     'R',
--     'NC-17'
--     );
-- zzz


ALTER TYPE public.mpaa_rating OWNER TO jql_demo;

--
-- Name: year; Type: DOMAIN; Schema: public; Owner: jql_demo
--

-- CREATE DOMAIN year AS integer
--     CONSTRAINT year_check CHECK (((VALUE >= 1901) AND (VALUE <= 2155)));
-- zzz

ALTER DOMAIN public.year OWNER TO jql_demo;

--
-- Name: _group_concat(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE OR REPLACE FUNCTION _group_concat(text, text) RETURNS text
AS $_$
SELECT CASE
           WHEN $2 IS NULL THEN $1
           WHEN $1 IS NULL THEN $2
           ELSE $1 || ', ' || $2
           END
$_$
    LANGUAGE sql IMMUTABLE;


ALTER FUNCTION public._group_concat(text, text) OWNER TO jql_demo;

--
-- Name: group_concat(text); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE OR REPLACE AGGREGATE group_concat(text) (
    SFUNC = _group_concat,
    STYPE = text
    );


ALTER AGGREGATE public.group_concat(text) OWNER TO jql_demo;

--
-- Name: category_category_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS category_category_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.category_category_id_seq OWNER TO jql_demo;

--
-- Name: category; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS category (
                          category_id bigint generated by default as identity
                              constraint category_pkey
                                  primary key, --- integer DEFAULT nextval('category_category_id_seq'::regclass) NOT NULL,
                          name character varying(25) NOT NULL,
                          last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.category OWNER TO jql_demo;

--
-- Name: film_film_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS film_film_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.film_film_id_seq OWNER TO jql_demo;

--
-- Name: film; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS film (
                      film_id bigint generated by default as identity
                          constraint film_pkey
                              primary key, -- integer DEFAULT nextval('film_film_id_seq'::regclass) NOT NULL,
                      title character varying(255) NOT NULL,
                      description text,
                      release_year year,
                      language_id smallint NOT NULL,
                      original_language_id smallint,
                      rental_duration smallint DEFAULT 3 NOT NULL,
                      rental_rate numeric(4,2) DEFAULT 4.99 NOT NULL,
                      length smallint,
                      replacement_cost numeric(5,2) DEFAULT 19.99 NOT NULL,
                      rating mpaa_rating DEFAULT 'G'::mpaa_rating,
                      last_update timestamp without time zone DEFAULT now() NOT NULL,
                      special_features text[],
                      fulltext tsvector NOT NULL
);


ALTER TABLE public.film OWNER TO jql_demo;

--
-- Name: film_actor; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS film_actor (
                            actor_id bigint NOT NULL
                                constraint film_actor_actor_fk
                                    references actor,
                            film_id bigint NOT NULL
                                constraint film_actor_film_fk
                                    references film,
                            last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.film_actor OWNER TO jql_demo;

--
-- Name: film_category; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS film_category (
                               film_id bigint NOT NULL
                                         constraint film_category_film_fk
                                         references film,
                               category_id bigint NOT NULL
                                   constraint film_category_category_fk
                                       references category,
                               last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.film_category OWNER TO jql_demo;

--
-- Name: actor_info; Type: VIEW; Schema: public; Owner: jql_demo
--

CREATE OR REPLACE VIEW actor_info AS
SELECT a.actor_id, a.first_name, a.last_name, group_concat(DISTINCT (((c.name)::text || ': '::text) || (SELECT group_concat((f.title)::text) AS group_concat FROM ((film f JOIN film_category fc ON ((f.film_id = fc.film_id))) JOIN film_actor fa ON ((f.film_id = fa.film_id))) WHERE ((fc.category_id = c.category_id) AND (fa.actor_id = a.actor_id)) GROUP BY fa.actor_id))) AS film_info FROM (((actor a LEFT JOIN film_actor fa ON ((a.actor_id = fa.actor_id))) LEFT JOIN film_category fc ON ((fa.film_id = fc.film_id))) LEFT JOIN category c ON ((fc.category_id = c.category_id))) GROUP BY a.actor_id, a.first_name, a.last_name;


ALTER TABLE public.actor_info OWNER TO jql_demo;

--
-- Name: address_address_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS address_address_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.address_address_id_seq OWNER TO jql_demo;

--
-- Name: address; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS address (
                         address_id bigint generated by default as identity
                             constraint address_pkey
                                 primary key, -- integer DEFAULT nextval('address_address_id_seq'::regclass) NOT NULL,
                         address character varying(50) NOT NULL,
                         address2 character varying(50),
                         district character varying(20) NOT NULL,
                         city_id smallint NOT NULL,
                         postal_code character varying(10),
                         phone character varying(20) NOT NULL,
                         last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.address OWNER TO jql_demo;

--
-- Name: city_city_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS city_city_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.city_city_id_seq OWNER TO jql_demo;

--
-- Name: city; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS city (
                      city_id bigint generated by default as identity
                          constraint city_pkey
                              primary key, -- integer DEFAULT nextval('city_city_id_seq'::regclass) NOT NULL,
                      city character varying(50) NOT NULL,
                      country_id smallint NOT NULL,
                      last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.city OWNER TO jql_demo;

--
-- Name: country_country_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS country_country_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.country_country_id_seq OWNER TO jql_demo;

--
-- Name: country; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS country (
                         country_id bigint generated by default as identity
                             constraint country_pkey
                                 primary key, -- integer DEFAULT nextval('country_country_id_seq'::regclass) NOT NULL,
                         country character varying(50) NOT NULL,
                         last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.country OWNER TO jql_demo;

--
-- Name: customer_customer_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS customer_customer_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.customer_customer_id_seq OWNER TO jql_demo;

--
-- Name: customer; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS customer (
                          customer_id bigint generated by default as identity
                              constraint customer_pkey
                                  primary key, -- integer DEFAULT nextval('customer_customer_id_seq'::regclass) NOT NULL,
                          store_id bigint NOT NULL
                              CONSTRAINT customer_store_id_fkey REFERENCES store,
                          first_name character varying(45) NOT NULL,
                          last_name character varying(45) NOT NULL,
                          email character varying(50),
                          address_id smallint NOT NULL,
                          activebool boolean DEFAULT true NOT NULL,
                          create_date date DEFAULT ('now'::text)::date NOT NULL,
                          last_update timestamp without time zone DEFAULT now(),
                          active integer
);


ALTER TABLE public.customer OWNER TO jql_demo;

--
-- Name: customer_list; Type: VIEW; Schema: public; Owner: jql_demo
--

CREATE OR REPLACE VIEW customer_list AS
SELECT cu.customer_id AS id, (((cu.first_name)::text || ' '::text) || (cu.last_name)::text) AS name, a.address, a.postal_code AS "zip code", a.phone, city.city, country.country, CASE WHEN cu.activebool THEN 'active'::text ELSE ''::text END AS notes, cu.store_id AS sid FROM (((customer cu JOIN address a ON ((cu.address_id = a.address_id))) JOIN city ON ((a.city_id = city.city_id))) JOIN country ON ((city.country_id = country.country_id)));


ALTER TABLE public.customer_list OWNER TO jql_demo;

--
-- Name: film_list; Type: VIEW; Schema: public; Owner: jql_demo
--

CREATE OR REPLACE VIEW film_list AS
SELECT film.film_id AS fid, film.title, film.description, category.name AS category, film.rental_rate AS price, film.length, film.rating, group_concat((((actor.first_name)::text || ' '::text) || (actor.last_name)::text)) AS actors FROM ((((category LEFT JOIN film_category ON ((category.category_id = film_category.category_id))) LEFT JOIN film ON ((film_category.film_id = film.film_id))) JOIN film_actor ON ((film.film_id = film_actor.film_id))) JOIN actor ON ((film_actor.actor_id = actor.actor_id))) GROUP BY film.film_id, film.title, film.description, category.name, film.rental_rate, film.length, film.rating;


ALTER TABLE public.film_list OWNER TO jql_demo;

--
-- Name: inventory_inventory_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS inventory_inventory_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.inventory_inventory_id_seq OWNER TO jql_demo;

--
-- Name: inventory; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS inventory (
                           inventory_id bigint generated by default as identity
                               constraint inventory_pkey
                                   primary key, -- integer DEFAULT nextval('inventory_inventory_id_seq'::regclass) NOT NULL,
                           film_id smallint NOT NULL,
                           store_id smallint NOT NULL,
                           last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.inventory OWNER TO jql_demo;

--
-- Name: language_language_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS language_language_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.language_language_id_seq OWNER TO jql_demo;

--
-- Name: language; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS language (
                          language_id bigint generated by default as identity
                              constraint language_pkey
                                  primary key, -- integer DEFAULT nextval('language_language_id_seq'::regclass) NOT NULL,
                          name character(20) NOT NULL,
                          last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.language OWNER TO jql_demo;

--
-- Name: nicer_but_slower_film_list; Type: VIEW; Schema: public; Owner: jql_demo
--

CREATE OR REPLACE VIEW nicer_but_slower_film_list AS
SELECT film.film_id AS fid, film.title, film.description, category.name AS category, film.rental_rate AS price, film.length, film.rating, group_concat((((upper("substring"((actor.first_name)::text, 1, 1)) || lower("substring"((actor.first_name)::text, 2))) || upper("substring"((actor.last_name)::text, 1, 1))) || lower("substring"((actor.last_name)::text, 2)))) AS actors FROM ((((category LEFT JOIN film_category ON ((category.category_id = film_category.category_id))) LEFT JOIN film ON ((film_category.film_id = film.film_id))) JOIN film_actor ON ((film.film_id = film_actor.film_id))) JOIN actor ON ((film_actor.actor_id = actor.actor_id))) GROUP BY film.film_id, film.title, film.description, category.name, film.rental_rate, film.length, film.rating;


ALTER TABLE public.nicer_but_slower_film_list OWNER TO jql_demo;



--
-- Name: rental_rental_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS rental_rental_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.rental_rental_id_seq OWNER TO jql_demo;

--
-- Name: rental; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS rental (
                        rental_id bigint generated by default as identity
                            constraint rental_pkey
                                primary key, -- integer DEFAULT nextval('rental_rental_id_seq'::regclass) NOT NULL,
                        rental_date timestamp without time zone NOT NULL,
                        inventory_id integer NOT NULL,
                        customer_id smallint NOT NULL,
                        return_date timestamp without time zone,
                        staff_id smallint NOT NULL,
                        last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.rental OWNER TO jql_demo;

--
-- Name: sales_by_film_category; Type: VIEW; Schema: public; Owner: jql_demo
--


ALTER TABLE public.sales_by_film_category OWNER TO jql_demo;

--
-- Name: staff_staff_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS staff_staff_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.staff_staff_id_seq OWNER TO jql_demo;

--
-- Name: staff; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS staff (
                       staff_id bigint generated by default as identity
                           constraint staff_pkey
                               primary key, -- integer DEFAULT nextval('staff_staff_id_seq'::regclass) NOT NULL,
                       first_name character varying(45) NOT NULL,
                       last_name character varying(45) NOT NULL,
                       address_id smallint NOT NULL,
                       email character varying(50),
                       store_id smallint NOT NULL,
                       active boolean DEFAULT true NOT NULL,
                       username character varying(16) NOT NULL,
                       password character varying(40),
                       last_update timestamp without time zone DEFAULT now() NOT NULL,
                       picture bytea
);


ALTER TABLE public.staff OWNER TO jql_demo;

--
-- Name: store_store_id_seq; Type: SEQUENCE; Schema: public; Owner: jql_demo
--

CREATE SEQUENCE IF NOT EXISTS store_store_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.store_store_id_seq OWNER TO jql_demo;

--
-- Name: store; Type: TABLE; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE TABLE IF NOT EXISTS store (
                       store_id bigint generated by default as identity
                           constraint store_pkey
                               primary key, -- integer DEFAULT nextval('store_store_id_seq'::regclass) NOT NULL,
                       manager_staff_id smallint NOT NULL,
                       address_id smallint NOT NULL,
                       last_update timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.store OWNER TO jql_demo;


--
-- Name: staff_list; Type: VIEW; Schema: public; Owner: jql_demo
--

CREATE OR REPLACE VIEW staff_list AS
SELECT s.staff_id AS id, (((s.first_name)::text || ' '::text) || (s.last_name)::text) AS name, a.address, a.postal_code AS "zip code", a.phone, city.city, country.country, s.store_id AS sid FROM (((staff s JOIN address a ON ((s.address_id = a.address_id))) JOIN city ON ((a.city_id = city.city_id))) JOIN country ON ((city.country_id = country.country_id)));


ALTER TABLE public.staff_list OWNER TO jql_demo;


--
-- Name: film_fulltext_idx; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS film_fulltext_idx ON film USING gist (fulltext);


--
-- Name: idx_actor_last_name; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_actor_last_name ON actor USING btree (last_name);


--
-- Name: idx_fk_address_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_fk_address_id ON customer USING btree (address_id);


--
-- Name: idx_fk_city_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_fk_city_id ON address USING btree (city_id);


--
-- Name: idx_fk_country_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_fk_country_id ON city USING btree (country_id);




--
-- Name: idx_fk_film_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_fk_film_id ON film_actor USING btree (film_id);


--
-- Name: idx_fk_inventory_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_fk_inventory_id ON rental USING btree (inventory_id);


--
-- Name: idx_fk_language_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_fk_language_id ON film USING btree (language_id);


--
-- Name: idx_fk_original_language_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_fk_original_language_id ON film USING btree (original_language_id);


--
-- Name: idx_fk_store_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_fk_store_id ON customer USING btree (store_id);


--
-- Name: idx_last_name; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_last_name ON customer USING btree (last_name);


--
-- Name: idx_store_id_film_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_store_id_film_id ON inventory USING btree (store_id, film_id);


--
-- Name: idx_title; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE INDEX IF NOT EXISTS idx_title ON film USING btree (title);


--
-- Name: idx_unq_manager_staff_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE UNIQUE INDEX IF NOT EXISTS idx_unq_manager_staff_id ON store USING btree (manager_staff_id);


--
-- Name: idx_unq_rental_rental_date_inventory_id_customer_id; Type: INDEX; Schema: public; Owner: jql_demo; Tablespace:
--

CREATE UNIQUE INDEX IF NOT EXISTS idx_unq_rental_rental_date_inventory_id_customer_id ON rental USING btree (rental_date, inventory_id, customer_id);



--
-- Name: address_city_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY address
    ADD CONSTRAINT address_city_id_fkey FOREIGN KEY (city_id) REFERENCES city(city_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: city_country_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY city
    ADD CONSTRAINT city_country_id_fkey FOREIGN KEY (country_id) REFERENCES country(country_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: customer_address_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY customer
    ADD CONSTRAINT customer_address_id_fkey FOREIGN KEY (address_id) REFERENCES address(address_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: customer_store_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY customer
    ADD CONSTRAINT customer_store_id_fkey FOREIGN KEY (store_id) REFERENCES store(store_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: film_actor_actor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY film_actor
    ADD CONSTRAINT film_actor_actor_id_fkey FOREIGN KEY (actor_id) REFERENCES actor(actor_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: film_actor_film_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY film_actor
    ADD CONSTRAINT film_actor_film_id_fkey FOREIGN KEY (film_id) REFERENCES film(film_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: film_category_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY film_category
    ADD CONSTRAINT film_category_category_id_fkey FOREIGN KEY (category_id) REFERENCES category(category_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: film_category_film_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY film_category
    ADD CONSTRAINT film_category_film_id_fkey FOREIGN KEY (film_id) REFERENCES film(film_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: film_language_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY film
    ADD CONSTRAINT film_language_id_fkey FOREIGN KEY (language_id) REFERENCES language(language_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: film_original_language_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY film
    ADD CONSTRAINT film_original_language_id_fkey FOREIGN KEY (original_language_id) REFERENCES language(language_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: inventory_film_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY inventory
    ADD CONSTRAINT inventory_film_id_fkey FOREIGN KEY (film_id) REFERENCES film(film_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: inventory_store_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY inventory
    ADD CONSTRAINT inventory_store_id_fkey FOREIGN KEY (store_id) REFERENCES store(store_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: payment_customer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--


--
-- Name: rental_customer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY rental
    ADD CONSTRAINT rental_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: rental_inventory_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY rental
    ADD CONSTRAINT rental_inventory_id_fkey FOREIGN KEY (inventory_id) REFERENCES inventory(inventory_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: rental_staff_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY rental
    ADD CONSTRAINT rental_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES staff(staff_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: staff_address_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY staff
    ADD CONSTRAINT staff_address_id_fkey FOREIGN KEY (address_id) REFERENCES address(address_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: staff_store_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY staff
    ADD CONSTRAINT staff_store_id_fkey FOREIGN KEY (store_id) REFERENCES store(store_id);


--
-- Name: store_address_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY store
    ADD CONSTRAINT store_address_id_fkey FOREIGN KEY (address_id) REFERENCES address(address_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: store_manager_staff_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: jql_demo
--

ALTER TABLE ONLY store
    ADD CONSTRAINT store_manager_staff_id_fkey FOREIGN KEY (manager_staff_id) REFERENCES staff(staff_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: public; Type: ACL; Schema: -; Owner: jql_demo
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO jql_demo;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--
